//
// Created by user on 30.08.2019.
//

#ifndef LNK_JUMP_LIST_PARSER_UTILS_H
#define LNK_JUMP_LIST_PARSER_UTILS_H


#include <vector>
#include <string>
#include "LinkTargetIDList.h"
#include "UtilsConstant.h"

/**
    @class Utils
    Вспомогательный класс для разбора информации в структурах .lnk файла и списков быстрого доступа.       */
class Utils {
private:
    /* ----------------------------------------------------------------------------------------------- */
    /*! Вспомогательная функиця для нахождения названия приложения по его идентификатору.
        @param vec Значение, для которого нужно определить приложение
        @param clsid Идентификатор приложения
        @return bool Возвращает true в нахождения успешного совпадения, false - если ниего не найдено. */
    /* ----------------------------------------------------------------------------------------------- */
    static bool compareClsidType(std::vector<unsigned int> vec, std::string clsid);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Вспомогательная функиця для конвертирования WindowsTime в UnixTime
        @param input Значение, для которого конвертации WindowsTime в UnixTime
        @return time_t Возвращает время в формате UnixTime.                                            */
    /* ----------------------------------------------------------------------------------------------- */
    static time_t convertWindowsTimeToUnixTime(long long int input);

public:
    /// Поле, содержащее отступ для вывода основной информации поля.
    static std::string defaultOffset;
    /// Поле, содержащее отступ для вывода информации по документации для поля.
    static std::string defaultOffsetDocInfo;

    /* ----------------------------------------------------------------------------------------------- */
    /*! Функиця для нахождения длины по содержимому ячеек вектора из 4-х эелементов.
        @param vec Вектор беззнаковых целых чисел для нахождения длины по содержимому его ячеек
        @return unsigned int Длина вектора по содержимому его ячеек.                                   */
    /* ----------------------------------------------------------------------------------------------- */
    static unsigned int lenFourBytes(std::vector<unsigned int> vec);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Функиця для нахождения длины по содержимому ячеек вектора из 4-х эелементов с определённой позиции.
        @param vec Вектор беззнаковых целых чисел для нахождения длины по содержимому его ячеек
        @param pos Позиция в векторе, начинаая с которой нужно брать элементы для вычислений
        @return int Длина вектора по содержимому его ячеек.                                            */
    /* ----------------------------------------------------------------------------------------------- */
    static int lenFourBytesFromPos(std::vector<unsigned int> vec, int pos);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Функиця для нахождения длины по содержимому ячеек вектора из 4-х эелементов.
        @param vec Вектор символов для нахождения длины по содержимому его ячеек
        @return int Длина вектора по содержимому его ячеек.                                            */
    /* ----------------------------------------------------------------------------------------------- */
    static int lenFourBytes(std::vector<unsigned char> vec);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Функиця для нахождения длины по содержимому ячеек вектора из 2-х эелементов.
        @param vec Вектор символов для нахождения длины по содержимому его ячеек
        @return int Длина вектора по содержимому его ячеек.                                            */
    /* ----------------------------------------------------------------------------------------------- */
    static int lenTwoBytes(std::vector<unsigned char> vec);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Функиця для нахождения длины по содержимому ячеек вектора из 2-х эелементов.
        @param vec Вектор беззнаковых целых чисел для нахождения длины по содержимому его ячеек
        @return unsigned int Длина вектора по содержимому его ячеек.                                   */
    /* ----------------------------------------------------------------------------------------------- */
    static int lenTwoBytes(std::vector<unsigned int> vec);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Функиця для нахождения длины по содержимому ячеек вектора из 2-х эелементов с определённой позиции.
        @param vec Вектор беззнаковых целых чисел для нахождения длины по содержимому его ячеек
        @param pos Позиция в векторе, начинаая с которой нужно брать элементы для вычислений
        @return int Длина вектора по содержимому его ячеек.                                            */
    /* ----------------------------------------------------------------------------------------------- */
    static int lenTwoBytesFromPos(std::vector<unsigned int> vec, int pos);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Функиця для вывода содержимого вектора беззнаковх целых чисел.
        @param vec Вектор беззнаковых целых чисел для вывода информации
        @return void                                                                                   */
    /* ----------------------------------------------------------------------------------------------- */
    static void print_vec(std::vector<unsigned int> vec);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Функиця для вывода содержимого вектора беззнаковх целых чисел в ограниченном диапазоне.
        @param vec Вектор беззнаковых целых чисел для вывода информации
        @param from Позиция в векторе, начинаая с которой осуществлять вывод данных
        @param to Позиция в векторе, до которой существлять вывод данных
        @return void                                                                                   */
    /* ----------------------------------------------------------------------------------------------- */
    static void print_vec_from_to(std::vector<unsigned int> vec, int from, int to);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Функиця для вывода содержимого вектора беззнаковх целых чисел в виде unicode символов.
        @param vec Вектор беззнаковых целых чисел для вывода информации
        @return void                                                                                   */
    /* ----------------------------------------------------------------------------------------------- */
    static void print_vec_unicode(std::vector<unsigned int>& vec);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Функиця для вывода содержимого вектора беззнаковх целых чисел в виде unicode символов в ограниченном диапазоне.
        @param vec Вектор беззнаковых целых чисел для вывода информации
        @param from Позиция в векторе, начинаая с которой осуществлять вывод данных
        @param to Позиция в векторе, до которой существлять вывод данных
        @return void                                                                                   */
    /* ----------------------------------------------------------------------------------------------- */
    static void print_vec_unicode(std::vector<unsigned int>& vec, int from, int to);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Функиця поиска позиции первого нулевого байта от начала файла по заданной позиции в вкторе.
        @param vec Вектор беззнаковых целых чисел для поиска
        @param from Позиция в векторе, начинаая с которой осуществлять поиск
        @return int Позиця первого нулевого байта от начала файла по заданной позиции в вкторе. */
    /* ----------------------------------------------------------------------------------------------- */
    static int getFirstPosWhereByteIsNull(std::vector<unsigned int>& vec, int from);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Функиця заполнения данными списка ItemIdList.
        @param count Количество байт, которое занимает структура ItemIdList
        @param it Итератор, указывающий откуда читать данные
        @return std::vector<LinkTargetIDList::ItemIDList> Вектор структур ItemIDList.                  */
    /* ----------------------------------------------------------------------------------------------- */
    static std::vector<LinkTargetIDList::ItemIDList> fillItemIdList(int count,
                               std::vector<unsigned char>::const_iterator it);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Функиця вывода информации поля Data структуры ItemID.
        @param vec Вектор беззнаковых целых чисел - содержимое поля Data
        @return void                                                                                   */
    /* ----------------------------------------------------------------------------------------------- */
    static void parseItemData(std::vector<unsigned int> data);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Функиця поиска позиции первого байта нультерминатора от начала файла по заданному итератору вектора символов.
        @param it Итератор, указывающий откуда читать данные
        @return int Позиця первого байта нультерминатора от начала файла по заданной позиции в вкторе. */
    /* ----------------------------------------------------------------------------------------------- */
    static int getCountOfBytesBeforeNullTerminator(std::vector<unsigned char>::const_iterator it);
    /*! Функиця поиска позиции первого байта нультерминатора от начала файла по заданному
        итератору вектора беззнаковых целых чисел.
        @param it Итератор, указывающий откуда читать данные
        @return int Позиця первого байта нультерминатора от начала файла по заданной позиции в вкторе. */
    /* ----------------------------------------------------------------------------------------------- */
    static int getCountOfBytesBeforeNullTerminatorInt(std::vector<unsigned int>::const_iterator it);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Функиця для даты из данных заданного вектора, начиная с некоторой позиции.
        @param vec Вектор беззнаковых целых чисел для нахождения даты
        @param pos Позиция в векторе, начинаая с которой нужно брать элементы для вычислений
        @return void                                                                                   */
    /* ----------------------------------------------------------------------------------------------- */
    static void getDateFromPos(std::vector<unsigned int> vec, int pos);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Функиця для MAC адреса.
        @param vec Вектор беззнаковых целых чдля вывода информации
        @param pos Позиция в векторе, начинаая с которой нужно брать элементы для вывода
        @return void                                                                                   */
    /* ----------------------------------------------------------------------------------------------- */
    static void printMacAddr(std::vector<unsigned int> vec, int pos);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Функиця для перевода содержимого вектора из 8-ми ячеек в одно число типа long long int.
        @param vec Вектор беззнаковых целых чисел для перевода
        @param pos Позиция в векторе, начинаая с которой нужно брать элементы для вычислений
        @return long long int Представление содержимого ветора из 8-ми ячеек в виде одного числа       */
    /* ----------------------------------------------------------------------------------------------- */
    static long long int vectEightBytesToUnsignedInt(std::vector<unsigned int> vec, int pos);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Функиця для перевода содержимого вектора из 4-х ячеек в одно число типа unsigned int.
        @param vec Вектор беззнаковых целых чисел для перевода
        @param pos Позиция в векторе, начинаая с которой нужно брать элементы для вычислений
        @return unsigned int Представление содержимого ветора из 4-х ячеек в виде одного числа         */
    /* ----------------------------------------------------------------------------------------------- */
    static unsigned int vectFourBytesToUnsignedInt(std::vector<unsigned int> vec, int pos);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Функиця для перевода содержимого вектора из 2-х ячеек в одно число типа unsigned int.
        @param vec Вектор беззнаковых целых чисел для перевода
        @param pos Позиция в векторе, начинаая с которой нужно брать элементы для вычислений
        @return unsigned int Представление содержимого ветора из 2-х ячеек в виде одного числа         */
    /* ----------------------------------------------------------------------------------------------- */
    static unsigned int vectTwoToUnsignedInt(std::vector<unsigned int> vec, int pos);
//    static std::vector<unsigned int> getSidForComparing(std::vector<unsigned int> vec, int pos);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Функиця для вывода class identifier (CLSID) или globally unique identifier (GUID).
        @param vec Вектор беззнаковых целых чдля вывода информации
        @param pos Позиция в векторе, начинаая с которой нужно брать элементы для вывода
        @return void                                                                                   */
    /* ----------------------------------------------------------------------------------------------- */
    static void printSid(std::vector<unsigned int> vec, int pos);
    /* ----------------------------------------------------------------------------------------------- */
    /*! Функция определения class identifier (CLSID).
        @param clsid Вектор содержащий class identifier (CLSID)
        @return std::string Текстовое представление CLSID                                              */
    /* ----------------------------------------------------------------------------------------------- */
    static std::string getClsidType(std::vector<unsigned int> clsid);

    /* ----------------------------------------------------------------------------------------------- */
    /*! \brief Структура clsid_type содержит clsid и соответствующее ему названия приложения.          */
    /*!  Включает следующие поля:
            appId;
            name;                                                                                      */
    /* ----------------------------------------------------------------------------------------------- */
    struct clsid_type {
        std::string clsid;
        std::string name;
    };
};

#endif //LNK_JUMP_LIST_PARSER_UTILS_H
